diff --git a/CHANGES.md b/CHANGES.md
index 2c56f2a..d502286 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,4 +1,9 @@
 
+# v0.2.12
+
+-   Adds
+
+
 # v0.2.11
 
 -   Adds the ability to bind to conditionally bind to `null`, to disable
diff --git a/README.md b/README.md
index 4e3165c..e83e075 100644
--- a/README.md
+++ b/README.md
@@ -220,6 +220,50 @@ array.clear();
 expect(object.last).toBe(null);
 ```
 
+### Only
+
+FRB provides an `only` operator, which can either observe or bind the
+only element of a collection.  The `only` observer watches a collection
+for when there is only one value in that collection and emits that
+value..  If there are multiple values, it emits null.
+
+```javascript
+var object = {array: [], only: null};
+Bindings.defineBindings(object, {
+    only: {"<->": "array.only()"}
+});
+
+object.array = [1];
+expect(object.only).toBe(1);
+
+object.array.pop();
+expect(object.only).toBe(undefined);
+
+object.array = [1, 2, 3];
+expect(object.only).toBe(undefined);
+```
+
+THe `only` binder watches a value.  When the value is null, it does
+nothing.  Otherwise, it will update the bound collection such that it
+only contains that value.  If the collection was empty, it adds the
+value.  Otherwise, if the collection did not have the value, it replaces
+the collection's content with the one value.  Otherwise, it removes
+everything but the value it already contains.  Regardless of the means,
+the end result is the same.  If the value is non-null, it will be the
+only value in the collection.
+
+```javascript
+object.only = 2;
+expect(object.array.slice()).toEqual([2]);
+// Note that slice() is necessary only because the testing scaffold
+// does not consider an observable array equivalent to a plain array
+// with the same content
+
+object.only = null;
+object.array.push(3);
+expect(object.array.slice()).toEqual([2, 3]);
+```
+
 ### Map
 
 You can also create mappings from one array to a new array and an
@@ -388,6 +432,65 @@ expect(object.sorted.map(function (array) {
 ]);
 ```
 
+### Unique and Sorted
+
+FRB can create a sorted index of unique values using `sortedSet` blocks.
+
+```javascript
+var object = Bindings.defineBindings({
+    folks: [
+        {id: 4, name: "Bob"},
+        {id: 2, name: "Alice"},
+        {id: 3, name: "Bob"},
+        {id: 1, name: "Alice"},
+        {id: 1, name: "Alice"} // redundant
+    ]
+}, {
+    inOrder: {"<-": "folks.sortedSet{id}"},
+    byId: {"<-": "folks.map{[id, this]}.toMap()"},
+    byName: {"<-": "inOrder.toArray().group{name}.toMap()"}
+});
+
+expect(object.inOrder.toArray()).toEqual([
+    object.byId.get(1),
+    object.byId.get(2),
+    object.byId.get(3),
+    object.byId.get(4)
+]);
+
+expect(object.byName.get("Alice")).toEqual([
+    object.byId.get(1),
+    object.byId.get(2)
+]);
+```
+
+The outcome is a `SortedSet` data structure, not an `Array`.  The sorted
+set is useful for fast lookups, inserts, and deletes on sorted, unique
+data.  If you would prefer a sorted array of unique values, you can
+combine other operators to the same effect.
+
+```javascript
+var object = Bindings.defineBindings({
+    folks: [
+        {id: 4, name: "Bob"},
+        {id: 2, name: "Alice"},
+        {id: 3, name: "Bob"},
+        {id: 1, name: "Alice"},
+        {id: 1, name: "Alice"} // redundant
+    ]
+}, {
+    index: {"<-": "folks.group{id}.sorted{.0}.map{.1.last()}"}
+});
+
+expect(object.index).toEqual([
+    {id: 1, name: "Alice"},
+    {id: 2, name: "Alice"},
+    {id: 3, name: "Bob"},
+    {id: 4, name: "Bob"}
+]);
+```
+
+
 ### Min and Max
 
 A binding can observe the minimum or maximum of a collection.  FRB uses
@@ -2050,9 +2153,10 @@ expect(path).toBe("a && b");
 -   **block-call** = **function-name** `{` **expression** `}`
     -   **block-name** = `map` *(mapBlock)* or `filter` *(filterBlock)*
         or `some` *(someBlock)* or `every` *(everyBlock)* or `sorted`
-        *(sortedBlock)* or `min` *(minBlock)* or `max` *(maxBlock)* or
-        `group` *(groupBlock)* or `groupMap` *(groupMapBlock)* or
-        **function-name** *(map followed by function-call)*
+        *(sortedBlock)* or `sortedSet` *(sortedSetBlock)* or `min`
+        *(minBlock)* or `max` *(maxBlock)* or `group` *(groupBlock)* or
+        `groupMap` *(groupMapBlock)* or **function-name** *(map followed
+        by function-call)*
 -   **literal** = **string-literal** or **number-literal**
     -   **number-literal** = **digits** ( `.` **digits** )? *(literal
         and value is a number)*
@@ -2123,6 +2227,12 @@ available.
     property of each value described in the block, or itself if empty.
     Sorted arrays are incrementally updating as values are added and
     deleted from the source.
+-   A "sortedSet" block observes a collection that emits range change
+    events, by way of a property of each value described in the block,
+    or itself if empty, emitting a `SortedSet` value exactly once.  If
+    the input is or becomes invalid, the sorted set is cleared, not
+    replaced.  The sorted set will always contain the last of each group
+    of equivalant values from the input.
 -   A "min" block observes the which of the values in a given collection
     produces the smallest value through the given relation.
 -   A "max" block observes the which of the values in a given collection
@@ -2333,6 +2443,7 @@ nodes (or an "args" object for `record`).
 -   `everyBlock`: the left is the input, the right is a criterion.
 -   `sortedBlock`: the left is the input, the right is a relation on
     each value of the input on which to compare to determine the order.
+-   `sortedSetBlock`: differs only in semantics from `sortedBlock`.
 -   `minBlock`: the left is the input, the right is a relation on each
     value of the input by which to compare the value to others.
 -   `maxBlock`: the left is the input, the right is a relation on each
diff --git a/binders.js b/binders.js
index e688fd2..1560f68 100644
--- a/binders.js
+++ b/binders.js
@@ -211,6 +211,20 @@ function makeConditionalBinder(observeCondition, bindConsequent, bindAlternate)
     };
 }
 
+// array.only() <- value
+exports.makeOnlyBinder = makeOnlyBinder;
+function makeOnlyBinder(observeArray) {
+    return function bindOnly(observeValue, sourceScope, targetScope, descriptor, trace) {
+        return observeArray(autoCancelPrevious(function replaceArray(array) {
+            if (!array) return;
+            return observeValue(autoCancelPrevious(function replaceOnlyValue(value) {
+                if (value == null) return;
+                array.splice(0, array.length, value);
+            }), sourceScope);
+        }), targetScope);
+    };
+}
+
 // a.* <- b.*
 exports.makeRangeContentBinder = makeRangeContentBinder;
 function makeRangeContentBinder(observeTarget, bindTarget) {
diff --git a/checklist.csv b/checklist.csv
index 7005a61..f1031a1 100644
--- a/checklist.csv
+++ b/checklist.csv
@@ -13,7 +13,7 @@ record,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
 property,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y
 get,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y
 with,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
-parent,N,N,N,N,N,X,X,N,N,N,X,N
+parent,Y,Y,Y,Y,Y,X,X,N,N,N,X,N
 has,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y
 if,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y
 default,Y,Y,Y,Y,Y,X,X,N,N,N,N,N
@@ -22,15 +22,13 @@ defined,Y,Y,Y,Y,Y,X,X,N,N,N,N,N
 mapBlock,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
 filterBlock,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
 sortedBlock,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
-sortedSetBlock,N,N,Y,N,N,X,X,N,N,N,X,N
+sortedSetBlock,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
 groupBlock,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
 groupMapBlock,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
 mapContent,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y
 rangeContent,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y
 someBlock,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,N,Y
 everyBlock,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,N,Y
-one,Y,Y,Y,Y,N,X,X,N,N,N,X,N
-only,Y,Y,Y,Y,N,N,N,N,N,N,N,N
 ,,,,,,,,,,,,
 items,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,N
 values,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,N
@@ -46,6 +44,8 @@ order,N,N,Y,N,N,X,X,N,N,N,X,N
 sum,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
 average,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
 last,Y,Y,Y,Y,Y,X,X,Y,N,N,X,N
+one,Y,Y,Y,Y,N,X,X,N,N,N,X,N
+only,Y,Y,Y,Y,Y,Y,Y,Y,N,N,N,N
 minBlock,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
 maxBlock,Y,Y,Y,Y,Y,X,X,Y,Y,Y,X,Y
 ,,,,,,,,,,,,
diff --git a/compile-binder.js b/compile-binder.js
index e650894..9988725 100644
--- a/compile-binder.js
+++ b/compile-binder.js
@@ -18,6 +18,7 @@ compile.semantics = {
         property: Binders.makePropertyBinder,
         get: Binders.makeGetBinder,
         has: Binders.makeHasBinder,
+        only: Binders.makeOnlyBinder,
         rangeContent: Binders.makeRangeContentBinder,
         mapContent: Binders.makeMapContentBinder,
         reversed: Binders.makeReversedBinder,
diff --git a/compile-evaluator.js b/compile-evaluator.js
index 35208c7..33754a9 100644
--- a/compile-evaluator.js
+++ b/compile-evaluator.js
@@ -1,6 +1,7 @@
 
 var Object = require("collections/shim-object");
 var Map = require("collections/map");
+var SortedSet = require("collections/sorted-set");
 var Operators = require("./operators");
 var Scope = require("./scope");
 
@@ -114,6 +115,25 @@ var argCompilers = {
         };
     },
 
+    sortedSetBlock: function (evaluateCollection, evaluateRelation) {
+        return function (scope) {
+            function map(x) {
+                return evaluateRelation(Scope.nest(scope, x));
+            }
+            function contentCompare(x, y) {
+                return Object.compare(map(x), map(y));
+            }
+            function contentEquals(x, y) {
+                return Object.equals(map(x), map(y));
+            }
+            return new SortedSet(
+                evaluateCollection(scope),
+                contentEquals,
+                contentCompare
+            );
+        };
+    },
+
     groupBlock: function (evaluateCollection, evaluateRelation) {
         return function (scope) {
             return evaluateCollection(scope)
diff --git a/compile-observer.js b/compile-observer.js
index 0361c1b..0e23655 100644
--- a/compile-observer.js
+++ b/compile-observer.js
@@ -33,7 +33,7 @@ var semantics = compile.semantics = {
         everyBlock: Observers.makeEveryBlockObserver,
         someBlock: Observers.makeSomeBlockObserver,
         sortedBlock: Observers.makeSortedBlockObserver,
-        // TODO sortedSetBlock: Observers.makeSortedSetBlockObserver,
+        sortedSetBlock: Observers.makeSortedSetBlockObserver,
         groupBlock: Observers.makeGroupBlockObserver,
         groupMapBlock: Observers.makeGroupMapBlockObserver,
         minBlock: Observers.makeMinBlockObserver,
@@ -46,6 +46,7 @@ var semantics = compile.semantics = {
         sum: Observers.makeSumObserver,
         average: Observers.makeAverageObserver,
         last: Observers.makeLastObserver,
+        only: Observers.makeOnlyObserver,
         has: Observers.makeHasObserver,
         // TODO zip
         tuple: Observers.makeArrayObserver,
@@ -53,6 +54,7 @@ var semantics = compile.semantics = {
         startsWith: Observers.makeStartsWithObserver,
         endsWith: Observers.makeEndsWithObserver,
         contains: Observers.makeContainsObserver,
+        join: Observers.makeJoinObserver,
         toArray: Observers.makeToArrayObserver,
         asArray: Observers.makeToArrayObserver // XXX deprecated
     },
diff --git a/grammar.js b/grammar.js
index 0ab64b6..ec70bbd 100644
--- a/grammar.js
+++ b/grammar.js
@@ -4494,6 +4494,7 @@ module.exports = (function() {
             "some": "someBlock",
             "every": "everyBlock",
             "sorted": "sortedBlock",
+            "sortedSet": "sortedSetBlock",
             "group": "groupBlock",
             "groupMap": "groupMapBlock",
             "min": "minBlock",
diff --git a/grammar.pegjs b/grammar.pegjs
index 66f247e..fe618d6 100644
--- a/grammar.pegjs
+++ b/grammar.pegjs
@@ -37,6 +37,7 @@
         "some": "someBlock",
         "every": "everyBlock",
         "sorted": "sortedBlock",
+        "sortedSet": "sortedSetBlock",
         "group": "groupBlock",
         "groupMap": "groupMapBlock",
         "min": "minBlock",
@@ -54,7 +55,7 @@
 expression "expression" = if
 
 expressions
-    = head:expression tail:("," _ expression)* {
+    = head:expression tail:("," _ expression)* _ {
         var result = [head];
         for (var i = 0; i < tail.length; i++) {
             result.push(tail[i][2]);
@@ -214,7 +215,7 @@ chain
     }
 
 tail
-    = name:word "{" expression:expression "}" {
+    = name:word "{" _ expression:expression _ "}" {
         if (BLOCKS[name]) {
             return function (previous) {
                 return {
@@ -386,7 +387,7 @@ array
     = "[" _ "]" {
         return {type: "tuple", args: []};
     }
-    / "[" expressions:expressions "]" {
+    / "[" _ expressions:expressions _ "]" {
         return {type: "tuple", args: expressions};
     }
 
@@ -458,9 +459,12 @@ lineTerminator "line terminator"
     = [\n\r\u2028\u2029]
 
 comment
-    = "/*" comment:$(!"*/" . )* "*/" {
+    = _ "/*" comment:$(!"*/" . )* "*/" _ {
         return comment;
     }
+    / _ {
+        return null;
+    }
 
 // MCS extensions
 
diff --git a/observers.js b/observers.js
index 1e977ac..63e01da 100644
--- a/observers.js
+++ b/observers.js
@@ -3,6 +3,7 @@ require("collections/shim"); // Function.noop
 var PropertyChanges = require("collections/listen/property-changes");
 require("collections/listen/array-changes");
 var SortedArray = require("collections/sorted-array");
+var SortedSet = require("collections/sorted-set");
 var Map = require("collections/map");
 var Set = require("collections/set");
 var Heap = require("collections/heap");
@@ -466,17 +467,8 @@ function makeSortedBlockObserver(observeCollection, observeRelation) {
     var observeSort = function (emit, scope) {
         return observeRelationEntries(autoCancelPrevious(function (input) {
             if (!input) return emit();
-
             var output = [];
-            var sorted = SortedArray(
-                output,
-                function equals(x, y) {
-                    return Object.equals(x[1], y[1]);
-                },
-                function compare(x, y) {
-                    return Object.compare(x[1], y[1]);
-                }
-            );
+            var sorted = SortedArray(output, entryValueEquals, entryValueCompare);
             function rangeChange(plus, minus) {
                 sorted.addEach(plus);
                 sorted.deleteEach(minus);
@@ -492,6 +484,14 @@ function makeSortedBlockObserver(observeCollection, observeRelation) {
     return makeMapBlockObserver(observeSort, observeEntryKey);
 }
 
+function entryValueEquals(x, y) {
+    return Object.equals(x[1], y[1]);
+}
+
+function entryValueCompare(x, y) {
+    return Object.compare(x[1], y[1]);
+}
+
 // Transforms a value into a [value, relation(value)] tuple
 function makeRelationEntryObserver(observeRelation) {
     return function (emit, scope) {
@@ -501,7 +501,47 @@ function makeRelationEntryObserver(observeRelation) {
     };
 }
 
-// TODO makeSortedSetBlockObserver
+exports.makeSortedSetBlockObserver = makeSortedSetBlockObserver;
+function makeSortedSetBlockObserver(observeCollection, observeRelation) {
+    var observeRelationEntry = makeRelationEntryObserver(observeRelation);
+    var observeRelationEntries = makeReplacingMapBlockObserver(observeCollection, observeRelationEntry);
+    var observeRelationEntryGroups = makeGroupBlockObserver(observeRelationEntries, observeEntryValue);
+    var observeUniqueRelationEntries = makeReplacingMapBlockObserver(observeRelationEntryGroups, makeLastObserver(observeEntryValue));
+    return function observeSortedSetBlock(emit, scope) {
+        var order = new Map();
+        function compare(x, y) {
+            x = order.get(x);
+            y = order.get(y);
+            return Object.compare(x, y);
+        }
+        function equals(x, y) {
+            x = order.get(x);
+            y = order.get(y);
+            return Object.equals(x, y);
+        }
+        var sortedSet = new SortedSet(null, equals, compare);
+        var cancel = emit(sortedSet) || Function.noop;
+        function rangeChange(plus, minus) {
+            minus.forEach(function (entry) {
+                sortedSet["delete"](entry[0]);
+                order["delete"](entry[0]);
+            });
+            plus.forEach(function (entry) {
+                order.set(entry[0], entry[1]);
+                sortedSet.add(entry[0]);
+            });
+        }
+        function entriesChange(entries) {
+            sortedSet.clear();
+            return observeRangeChange(entries, rangeChange, scope);
+        }
+        var cancelUniqueValuesObserver = observeUniqueRelationEntries(entriesChange, scope);
+        return function cancelSortedSetObserver() {
+            cancel();
+            cancelUniqueValuesObserver();
+        };
+    };
+}
 
 // calculating the reflected index for an incremental change:
 // [0, 1, 2, 3]  length 4
@@ -680,19 +720,16 @@ function makeHeapBlockObserver(observeCollection, observeRelation, order) {
     var observeRelationEntry = makeRelationEntryObserver(observeRelation);
     var observeRelationEntries = makeReplacingMapBlockObserver(observeCollection, observeRelationEntry);
 
-    function itemCompare(a, b) {
+    function entryValueOrderCompare(a, b) {
         return Object.compare(a[1], b[1]) * order;
     }
-    function itemEquals(a, b) {
-        return Object.equals(a[1], b[1]);
-    }
 
     return function observeHeapBlock(emit, scope) {
 
         return observeRelationEntries(autoCancelPrevious(function (input) {
             if (!input) return emit();
 
-            var heap = new Heap(null, itemEquals, itemCompare);
+            var heap = new Heap(null, entryValueEquals, entryValueOrderCompare);
 
             function rangeChange(plus, minus) {
                 heap.addEach(plus);
@@ -914,6 +951,32 @@ function makeContainsObserver(observeHaystack, observeNeedle) {
     }
 }
 
+exports.makeJoinObserver = makeJoinObserver;
+function makeJoinObserver(observeArray, observeDelimiter) {
+    observeDelimiter = observeDelimiter || observeNullStringLiteral;
+    return function observeJoin(emit, scope) {
+        return observeArray(autoCancelPrevious(function changeJoinArray(array) {
+            if (!array)
+                return emit() || Function.noop;
+            return observeDelimiter(autoCancelPrevious(function changeJoinDelimiter(delimiter) {
+                if (typeof delimiter !== "string")
+                    return emit() || Function.noop;
+                var cancel = Function.noop;
+                function rangeChange() {
+                    cancel = emit(array.join(delimiter)) || Function.noop;
+                }
+                var cancelRangeChange = observeRangeChange(array, rangeChange, scope);
+                return function cancelJoinObserver() {
+                    cancelRangeChange();
+                    cancel();
+                };
+            }), scope);
+        }), scope);
+    };
+}
+
+var observeNullStringLiteral = makeLiteralObserver("");
+
 // Collection Observers
 
 exports.observeRangeChange = observeRangeChange;
@@ -983,6 +1046,29 @@ function observeLast(collection, emit, scope) {
     };
 }
 
+exports.makeOnlyObserver = makeOnlyObserver;
+function makeOnlyObserver(observeCollection) {
+    return function (emit, scope) {
+        return observeCollection(autoCancelPrevious(makeUniq(function replaceCollectionForOnly(collection) {
+            return observeOnly(collection, emit, scope);
+        })), scope);
+    };
+}
+
+exports.observeOnly = observeOnly;
+function observeOnly(collection, emit, scope) {
+    var length = 0;
+    function rangeChange(plus, minus, index) {
+        length += plus.length - minus.length;
+        if (length === 1) {
+            return emit(collection.only());
+        } else {
+            return emit();
+        }
+    }
+    return observeRangeChange(collection, rangeChange, scope);
+}
+
 exports.makeRangeContentObserver = makeRangeContentObserver;
 function makeRangeContentObserver(observeCollection) {
     return function observeContent(emit, scope) {
diff --git a/spec/evaluate.js b/spec/evaluate.js
index fe9257b..3058cc3 100644
--- a/spec/evaluate.js
+++ b/spec/evaluate.js
@@ -215,6 +215,12 @@ module.exports = [
     },
 
     {
+        path: "sortedSet{foo}.map{foo}.reversed()",
+        input: [{foo: 3}, {foo: 1}, {foo: 1}, {foo: 2}],
+        output: [3, 2, 1]
+    },
+
+    {
         path: "group{score}",
         input: [{score: 1, name: "Josh"}, {score: 1, name: "Ben"}, {score: 2, name: "Alice"}],
         output: [
diff --git a/spec/language.js b/spec/language.js
index 7e598f8..a9cfab5 100644
--- a/spec/language.js
+++ b/spec/language.js
@@ -415,6 +415,14 @@ module.exports = [
     },
 
     {
+        path: "sortedSet{}",
+        syntax: {type: "sortedSetBlock", args: [
+            {type: "value"},
+            {type: "value"}
+        ]}
+    },
+
+    {
         path: "flatten()",
         syntax: {type: "flatten", args: [
             {type: "value"}
diff --git a/spec/observe-join-spec.js b/spec/observe-join-spec.js
new file mode 100644
index 0000000..2fc8056
--- /dev/null
+++ b/spec/observe-join-spec.js
@@ -0,0 +1,48 @@
+
+var Bindings = require("../bindings");
+
+describe("join", function () {
+
+    it("should observe changes to the input", function () {
+
+        var object = Bindings.defineBindings({}, {
+            joined: {"<-": "terms.join(delimiter)"}
+        });
+
+        object.terms = ['a', 'b', 'c'];
+        expect(object.joined).toBe(undefined);
+
+        object.terms = null;
+        object.delimiter = ', ';
+        expect(object.joined).toBe(undefined);
+
+        object.terms = ['a', 'b', 'c'];
+        expect(object.joined).toBe("a, b, c");
+
+        object.terms.push('d');
+        expect(object.joined).toBe("a, b, c, d");
+
+        object.terms.clear();
+        expect(object.joined).toBe("");
+    });
+
+    it("should join on null string if no argument given", function () {
+
+        var object = Bindings.defineBindings({}, {
+            joined: {"<-": "terms.join()"}
+        });
+
+        expect(object.joined).toBe(undefined);
+
+        object.terms = ['a', 'b', 'c'];
+        expect(object.joined).toBe('abc');
+
+        object.terms.push('d');
+        expect(object.joined).toBe("abcd");
+
+        object.terms.clear();
+        expect(object.joined).toBe("");
+    });
+
+});
+
diff --git a/spec/observe-sorted-set-spec.js b/spec/observe-sorted-set-spec.js
new file mode 100644
index 0000000..c2e9ebc
--- /dev/null
+++ b/spec/observe-sorted-set-spec.js
@@ -0,0 +1,39 @@
+
+var Bindings = require("../bindings");
+
+describe("observe sorted set", function () {
+    it("should work", function () {
+
+        var a = {name: 'a', index: 0};
+        var b = {name: 'b', index: 0};
+        var c = {name: 'c', index: 0};
+        var d = {name: 'd', index: 0};
+
+        var array = [a, b, c, d];
+
+        var object = Bindings.defineBindings({
+            array: array
+        }, {
+            "sortedSet": {"<-": "array.sortedSet{index}"}
+        });
+
+        expect(object.sortedSet.toArray()).toEqual([d]);
+
+        d.index = 3;
+        expect(object.sortedSet.toArray()).toEqual([c, d]);
+
+        c.index = 2;
+        expect(object.sortedSet.toArray()).toEqual([b, c, d]);
+
+        b.index = 1;
+        expect(object.sortedSet.toArray()).toEqual([a, b, c, d]);
+
+        a.index = 4;
+        expect(object.sortedSet.toArray()).toEqual([b, c, d, a]);
+
+        b.index = 4;
+        expect(object.sortedSet.toArray()).toEqual([c, d, b]);
+
+    });
+});
+
diff --git a/spec/readme-spec.js b/spec/readme-spec.js
index b4ec7c4..419b10c 100644
--- a/spec/readme-spec.js
+++ b/spec/readme-spec.js
@@ -123,6 +123,35 @@ describe("Tutorial", function () {
         expect(object.last).toBe(null);
     });
 
+    it("Only", function () {
+        var object = {array: [], only: null};
+        Bindings.defineBindings(object, {
+            only: {"<->": "array.only()"}
+        });
+
+        object.array = [1];
+        expect(object.only).toBe(1);
+
+        object.array.pop();
+        expect(object.only).toBe(undefined);
+
+        object.array = [1, 2, 3];
+        expect(object.only).toBe(undefined);
+
+        // (binding)
+        // Continued from above...
+        object.only = 2;
+        expect(object.array.slice()).toEqual([2]);
+        // Note that slice() is necessary only because the testing scaffold
+        // does not consider an observable array equivalent to a plain array
+        // with the same content
+
+        object.only = null;
+        object.array.push(3);
+        expect(object.array.slice()).toEqual([2, 3]);
+
+    });
+
     it("Map", function () {
         var object = {objects: [
             {number: 10},
@@ -240,6 +269,57 @@ describe("Tutorial", function () {
         ]);
     });
 
+    it("Unique and Sorted", function () {
+
+        var object = Bindings.defineBindings({
+            folks: [
+                {id: 4, name: "Bob"},
+                {id: 2, name: "Alice"},
+                {id: 3, name: "Bob"},
+                {id: 1, name: "Alice"},
+                {id: 1, name: "Alice"} // redundant
+            ]
+        }, {
+            inOrder: {"<-": "folks.sortedSet{id}"},
+            byId: {"<-": "folks.map{[id, this]}.toMap()"},
+            byName: {"<-": "inOrder.toArray().group{name}.toMap()"}
+        });
+
+        expect(object.inOrder.toArray()).toEqual([
+            object.byId.get(1),
+            object.byId.get(2),
+            object.byId.get(3),
+            object.byId.get(4)
+        ]);
+
+        expect(object.byName.get("Alice")).toEqual([
+            object.byId.get(1),
+            object.byId.get(2)
+        ]);
+
+    });
+
+    it("Unique and Sorted (Array)", function () {
+        var object = Bindings.defineBindings({
+            folks: [
+                {id: 4, name: "Bob"},
+                {id: 2, name: "Alice"},
+                {id: 3, name: "Bob"},
+                {id: 1, name: "Alice"},
+                {id: 1, name: "Alice"} // redundant
+            ]
+        }, {
+            index: {"<-": "folks.group{id}.sorted{.0}.map{.1.last()}"}
+        });
+
+        expect(object.index).toEqual([
+            {id: 1, name: "Alice"},
+            {id: 2, name: "Alice"},
+            {id: 3, name: "Bob"},
+            {id: 4, name: "Bob"}
+        ]);
+    });
+
     it("Min and Max", function () {
         var object = Bindings.defineBindings({}, {
             min: {"<-": "values.min{}"},
diff --git a/stringify.js b/stringify.js
index 9cafbab..3fe7329 100644
--- a/stringify.js
+++ b/stringify.js
@@ -143,6 +143,7 @@ stringify.semantics = {
         someBlock: makeBlockStringifier("some"),
         everyBlock: makeBlockStringifier("every"),
         sortedBlock: makeBlockStringifier("sorted"),
+        sortedSetBlock: makeBlockStringifier("sortedSet"),
         groupBlock: makeBlockStringifier("group"),
         groupMapBlock: makeBlockStringifier("groupMap"),
         minBlock: makeBlockStringifier("min"),
